"/fit_rota_full_lin_h_grid", horizon, "_",
ind, ".rda"))$best_mod
# start_par_lag <- if(ind == tps[1]){
#   rep(0.5, max_lag - 1)
# }else{
#   fit_rota_full_unres_temp$par_lag
# }
# fit_rota_full_unres_temp <- profile_par_lag(rotaBE_temp, ctrl_full_unres_temp,
#                                             start_par_lag = start_par_lag)
# save(fit_rota_full_unres_temp, file = paste0("model_fits/rota_full_unres/rota_full_unres_h", horizon,
#                                              "/fit_rota_full_unres_h", horizon, "_",
#                                              ind, ".rda"))
print(ind)
}
}
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota")
# create folder structure if necessary:
list.dirs()
dir.create("model_fits")
for(lag_structure in c("ar1", "geom", "pois", "lin", "unres")){
dir.create(paste0("model_fits/rota_gravity_", lag_structure))
for(horizon in 1:4){
dir.create(paste0("model_fits/rota_gravity_", lag_structure, "/rota_gravity_", lag_structure, "_h", horizon))
}
}
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota")
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota")
# create folder structure if necessary:
list.dirs()
dir.create("model_fits")
for(lag_structure in c("ar1", "geom", "pois", "lin", "unres")){
dir.create(paste0("model_fits/rota_full_", lag_structure))
for(horizon in 1:4){
dir.create(paste0("model_fits/rota_full_", lag_structure, "/rota_full_", lag_structure, "_h", horizon))
}
}
library(surveillance)
library(hhh4addon)
data("rotaBE")
# modify neighbourhood matrices to apply power law:
rotaBE@neighbourhood <- rotaBE@neighbourhood + 1
# define variable for Christmas breaks:
christmas <- numeric(nrow(rotaBE@observed))
christmas[(seq_along(christmas) %% 52) %in% c(0, 1)] <- 1
# number of sine/cosine waves to include in the endemic and epidemic components:
S_end <- 1
S_epid <- 1
# max_lag:
max_lag <- 5
# subset:
subs <- (max_lag + 1):nrow(rotaBE@observed)
# for the linear lag we adopt a grid-based optimization
vals_kappa_lin <- 1:99/100
vals_par_lag_lin <- log(vals_kappa_lin/(1 - vals_kappa_lin))
# full model
ctrl_full <- list(end = list(f = addSeason2formula(~0 + fe(1, unitSpecific = TRUE) + christmas, S = S_end)),
ar = list(f = ~-1),
ne = list(f = addSeason2formula(~0 + fe(1, unitSpecific = TRUE), S = S_epid),
weights = W_powerlaw(maxlag=5, normalize=TRUE, log=TRUE)),
max_lag = max_lag,
family = "NegBin1",
subset = subs,
data = list(christmas = christmas))
ctrl_full_pois <- ctrl_full; ctrl_full_pois$funct_lag <- poisson_lag
ctrl_full_lin <- ctrl_full; ctrl_full_lin$funct_lag <- linear_lag
ctrl_full_unres <- ctrl_full; ctrl_full_unres$funct_lag <- unrestricted_lag
tps <- (4*52):(7*52)
# fit models for direct forecasting
for(horizon in 1:1){
ctrl_full_temp <- ctrl_full
ctrl_full_temp$subset <- (horizon + max_lag):max(ctrl_full_temp$subset)
ctrl_full_temp$ar$lag <- ctrl_full_temp$ne$lag <- horizon
ctrl_full_temp$min_lag <- horizon
ctrl_full_temp$max_lag <- horizon + max_lag - 1
ctrl_full_pois_temp <- ctrl_full_temp; ctrl_full_pois_temp$funct_lag <- poisson_lag
ctrl_full_lin_temp <- ctrl_full_temp; ctrl_full_lin_temp$funct_lag <- linear_lag
ctrl_full_unres_temp <- ctrl_full_temp; ctrl_full_unres_temp$funct_lag <- unrestricted_lag
for(ind in tps){
# steer subset via NAs:
rotaBE_temp <- rotaBE
if(ind < nrow(rotaBE)){
rotaBE_temp@observed[(ind + 1):nrow(rotaBE_temp), ] <- NA
}
# fit_rota_full_ar1_temp <- hhh4(rotaBE_temp, ctrl_full_temp)
# save(fit_rota_full_ar1_temp, file = paste0("model_fits/rota_full_ar1/rota_full_ar1_h", horizon,
#                                            "/fit_rota_full_ar1_h", horizon, "_",
#                                            ind, ".rda"))
#
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_full_geom_temp$par_lag)
# fit_rota_full_geom_temp <- profile_par_lag(rotaBE_temp, ctrl_full_temp,
#                                            start_par_lag = start_par_lag)
# save(fit_rota_full_geom_temp, file = paste0("model_fits/rota_full_geom/rota_full_geom_h", horizon,
#                                             "/fit_rota_full_geom_h", horizon, "_",
#                                             ind, ".rda"))
#
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_full_pois_temp$par_lag)
# fit_rota_full_pois_temp <- profile_par_lag(rotaBE_temp, ctrl_full_pois_temp,
#                                            start_par_lag = start_par_lag)
# save(fit_rota_full_pois_temp, file = paste0("model_fits/rota_full_pois/rota_full_pois_h", horizon,
#                                             "/fit_rota_full_pois_h", horizon, "_",
#                                             ind, ".rda"))
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_full_lin_temp$par_lag)
# fit_rota_full_lin_temp <- profile_par_lag(rotaBE_temp, ctrl_full_lin_temp,
#                                           start_par_lag = start_par_lag)
fit_rota_full_lin_temp <- fit_par_lag(rotaBE_temp, ctrl_full_lin_temp,
range_par = vals_par_lag_lin, use_update = FALSE)
save(fit_rota_full_lin_temp, file = paste0("model_fits/rota_full_lin/rota_full_lin_h", horizon, "_grid",
"/fit_rota_full_lin_h", horizon, "_",
ind, ".rda"))$best_mod
# start_par_lag <- if(ind == tps[1]){
#   rep(0.5, max_lag - 1)
# }else{
#   fit_rota_full_unres_temp$par_lag
# }
# fit_rota_full_unres_temp <- profile_par_lag(rotaBE_temp, ctrl_full_unres_temp,
#                                             start_par_lag = start_par_lag)
# save(fit_rota_full_unres_temp, file = paste0("model_fits/rota_full_unres/rota_full_unres_h", horizon,
#                                              "/fit_rota_full_unres_h", horizon, "_",
#                                              ind, ".rda"))
print(ind)
}
}
dir.create(paste0("model_fits/rota_full_", lag_structure, "/rota_full_", lag_structure, "_h1_grid"))
# fit models for direct forecasting
for(horizon in 1:1){
ctrl_full_temp <- ctrl_full
ctrl_full_temp$subset <- (horizon + max_lag):max(ctrl_full_temp$subset)
ctrl_full_temp$ar$lag <- ctrl_full_temp$ne$lag <- horizon
ctrl_full_temp$min_lag <- horizon
ctrl_full_temp$max_lag <- horizon + max_lag - 1
ctrl_full_pois_temp <- ctrl_full_temp; ctrl_full_pois_temp$funct_lag <- poisson_lag
ctrl_full_lin_temp <- ctrl_full_temp; ctrl_full_lin_temp$funct_lag <- linear_lag
ctrl_full_unres_temp <- ctrl_full_temp; ctrl_full_unres_temp$funct_lag <- unrestricted_lag
for(ind in tps){
# steer subset via NAs:
rotaBE_temp <- rotaBE
if(ind < nrow(rotaBE)){
rotaBE_temp@observed[(ind + 1):nrow(rotaBE_temp), ] <- NA
}
# fit_rota_full_ar1_temp <- hhh4(rotaBE_temp, ctrl_full_temp)
# save(fit_rota_full_ar1_temp, file = paste0("model_fits/rota_full_ar1/rota_full_ar1_h", horizon,
#                                            "/fit_rota_full_ar1_h", horizon, "_",
#                                            ind, ".rda"))
#
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_full_geom_temp$par_lag)
# fit_rota_full_geom_temp <- profile_par_lag(rotaBE_temp, ctrl_full_temp,
#                                            start_par_lag = start_par_lag)
# save(fit_rota_full_geom_temp, file = paste0("model_fits/rota_full_geom/rota_full_geom_h", horizon,
#                                             "/fit_rota_full_geom_h", horizon, "_",
#                                             ind, ".rda"))
#
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_full_pois_temp$par_lag)
# fit_rota_full_pois_temp <- profile_par_lag(rotaBE_temp, ctrl_full_pois_temp,
#                                            start_par_lag = start_par_lag)
# save(fit_rota_full_pois_temp, file = paste0("model_fits/rota_full_pois/rota_full_pois_h", horizon,
#                                             "/fit_rota_full_pois_h", horizon, "_",
#                                             ind, ".rda"))
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_full_lin_temp$par_lag)
# fit_rota_full_lin_temp <- profile_par_lag(rotaBE_temp, ctrl_full_lin_temp,
#                                           start_par_lag = start_par_lag)
fit_rota_full_lin_temp <- fit_par_lag(rotaBE_temp, ctrl_full_lin_temp,
range_par = vals_par_lag_lin, use_update = FALSE)
save(fit_rota_full_lin_temp, file = paste0("model_fits/rota_full_lin/rota_full_lin_h", horizon, "_grid",
"/fit_rota_full_lin_h", horizon, "_",
ind, ".rda"))$best_mod
# start_par_lag <- if(ind == tps[1]){
#   rep(0.5, max_lag - 1)
# }else{
#   fit_rota_full_unres_temp$par_lag
# }
# fit_rota_full_unres_temp <- profile_par_lag(rotaBE_temp, ctrl_full_unres_temp,
#                                             start_par_lag = start_par_lag)
# save(fit_rota_full_unres_temp, file = paste0("model_fits/rota_full_unres/rota_full_unres_h", horizon,
#                                              "/fit_rota_full_unres_h", horizon, "_",
#                                              ind, ".rda"))
print(ind)
}
}
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota")
# create folder structure if necessary:
list.dirs()
dir.create("model_fits")
for(lag_structure in c("ar1", "geom", "pois", "lin", "unres")){
dir.create(paste0("model_fits/rota_full_", lag_structure))
for(horizon in 1:4){
dir.create(paste0("model_fits/rota_full_", lag_structure, "/rota_full_", lag_structure, "_h", horizon))
}
}
library(surveillance)
library(hhh4addon)
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota")
# create folder structure if necessary:
list.dirs()
dir.create("model_fits")
for(lag_structure in c("ar1", "geom", "pois", "lin", "unres")){
dir.create(paste0("model_fits/rota_full_", lag_structure))
for(horizon in 1:4){
dir.create(paste0("model_fits/rota_full_", lag_structure, "/rota_full_", lag_structure, "_h", horizon))
}
}
library(surveillance)
library(hhh4addon)
data("rotaBE")
# modify neighbourhood matrices to apply power law:
rotaBE@neighbourhood <- rotaBE@neighbourhood + 1
# define variable for Christmas breaks:
christmas <- numeric(nrow(rotaBE@observed))
christmas[(seq_along(christmas) %% 52) %in% c(0, 1)] <- 1
# number of sine/cosine waves to include in the endemic and epidemic components:
S_end <- 1
S_epid <- 1
# max_lag:
max_lag <- 5
# subset:
subs <- (max_lag + 1):nrow(rotaBE@observed)
# for the linear lag we adopt a grid-based optimization
vals_kappa_lin <- 1:99/100
vals_par_lag_lin <- log(vals_kappa_lin/(1 - vals_kappa_lin))
# full model
ctrl_full <- list(end = list(f = addSeason2formula(~0 + fe(1, unitSpecific = TRUE) + christmas, S = S_end)),
ar = list(f = ~-1),
ne = list(f = addSeason2formula(~0 + fe(1, unitSpecific = TRUE), S = S_epid),
weights = W_powerlaw(maxlag=5, normalize=TRUE, log=TRUE)),
max_lag = max_lag,
family = "NegBin1",
subset = subs,
data = list(christmas = christmas))
ctrl_full_pois <- ctrl_full; ctrl_full_pois$funct_lag <- poisson_lag
ctrl_full_lin <- ctrl_full; ctrl_full_lin$funct_lag <- linear_lag
ctrl_full_unres <- ctrl_full; ctrl_full_unres$funct_lag <- unrestricted_lag
tps <- (4*52):(7*52)
# fit models for direct forecasting
for(horizon in 1:1){
ctrl_full_temp <- ctrl_full
ctrl_full_temp$subset <- (horizon + max_lag):max(ctrl_full_temp$subset)
ctrl_full_temp$ar$lag <- ctrl_full_temp$ne$lag <- horizon
ctrl_full_temp$min_lag <- horizon
ctrl_full_temp$max_lag <- horizon + max_lag - 1
ctrl_full_pois_temp <- ctrl_full_temp; ctrl_full_pois_temp$funct_lag <- poisson_lag
ctrl_full_lin_temp <- ctrl_full_temp; ctrl_full_lin_temp$funct_lag <- linear_lag
ctrl_full_unres_temp <- ctrl_full_temp; ctrl_full_unres_temp$funct_lag <- unrestricted_lag
for(ind in tps){
# steer subset via NAs:
rotaBE_temp <- rotaBE
if(ind < nrow(rotaBE)){
rotaBE_temp@observed[(ind + 1):nrow(rotaBE_temp), ] <- NA
}
# fit_rota_full_ar1_temp <- hhh4(rotaBE_temp, ctrl_full_temp)
# save(fit_rota_full_ar1_temp, file = paste0("model_fits/rota_full_ar1/rota_full_ar1_h", horizon,
#                                            "/fit_rota_full_ar1_h", horizon, "_",
#                                            ind, ".rda"))
#
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_full_geom_temp$par_lag)
# fit_rota_full_geom_temp <- profile_par_lag(rotaBE_temp, ctrl_full_temp,
#                                            start_par_lag = start_par_lag)
# save(fit_rota_full_geom_temp, file = paste0("model_fits/rota_full_geom/rota_full_geom_h", horizon,
#                                             "/fit_rota_full_geom_h", horizon, "_",
#                                             ind, ".rda"))
#
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_full_pois_temp$par_lag)
# fit_rota_full_pois_temp <- profile_par_lag(rotaBE_temp, ctrl_full_pois_temp,
#                                            start_par_lag = start_par_lag)
# save(fit_rota_full_pois_temp, file = paste0("model_fits/rota_full_pois/rota_full_pois_h", horizon,
#                                             "/fit_rota_full_pois_h", horizon, "_",
#                                             ind, ".rda"))
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_full_lin_temp$par_lag)
# fit_rota_full_lin_temp <- profile_par_lag(rotaBE_temp, ctrl_full_lin_temp,
#                                           start_par_lag = start_par_lag)
fit_rota_full_lin_temp <- fit_par_lag(rotaBE_temp, ctrl_full_lin_temp,
range_par = vals_par_lag_lin, use_update = FALSE)
save(fit_rota_full_lin_temp, file = paste0("model_fits/rota_full_lin/rota_full_lin_h", horizon,
"/fit_rota_full_lin_h", horizon, "_",
ind, ".rda"))$best_mod
# start_par_lag <- if(ind == tps[1]){
#   rep(0.5, max_lag - 1)
# }else{
#   fit_rota_full_unres_temp$par_lag
# }
# fit_rota_full_unres_temp <- profile_par_lag(rotaBE_temp, ctrl_full_unres_temp,
#                                             start_par_lag = start_par_lag)
# save(fit_rota_full_unres_temp, file = paste0("model_fits/rota_full_unres/rota_full_unres_h", horizon,
#                                              "/fit_rota_full_unres_h", horizon, "_",
#                                              ind, ".rda"))
print(ind)
}
}
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota")
# create folder structure if necessary:
list.dirs()
dir.create("model_fits")
for(lag_structure in c("ar1", "geom", "pois", "lin", "unres")){
dir.create(paste0("model_fits/rota_gravity_", lag_structure))
for(horizon in 1:4){
dir.create(paste0("model_fits/rota_gravity_", lag_structure, "/rota_gravity_", lag_structure, "_h", horizon))
}
}
library(surveillance)
library(hhh4addon)
data("rotaBE")
# modify neighbourhood matrices to apply power law:
rotaBE@neighbourhood <- rotaBE@neighbourhood + 1
# define variable for Christmas breaks:
christmas <- numeric(nrow(rotaBE@observed))
christmas[(seq_along(christmas) %% 52) %in% c(0, 1)] <- 1
# number of sine/cosine waves to include in the endemic and epidemic components:
S_end <- 1
S_epid <- 1
# max_lag:
max_lag <- 5
# subset:
subs <- (max_lag + 1):nrow(rotaBE@observed)
# for the linear lag we adopt a grid-based optimization
vals_kappa_lin <- 1:99/100
vals_par_lag_lin <- log(vals_kappa_lin/(1 - vals_kappa_lin))
# gravity model
ctrl_gravity <- list(end = list(f = addSeason2formula(~0 + fe(1, unitSpecific = TRUE) + christmas, S = S_end)),
ar = list(f = ~-1),
ne = list(f = addSeason2formula(~1 + log(pop), S = S_epid),
weights = W_powerlaw(maxlag=5, normalize=TRUE, log=TRUE)),
max_lag = max_lag,
family = "NegBin1",
subset = subs,
data = list(christmas = christmas, pop = rotaBE@populationFrac))
ctrl_gravity_pois <- ctrl_gravity; ctrl_gravity_pois$funct_lag <- poisson_lag
ctrl_gravity_lin <- ctrl_gravity; ctrl_gravity_lin$funct_lag <- linear_lag
ctrl_gravity_unres <- ctrl_gravity; ctrl_gravity_unres$funct_lag <- unrestricted_lag
tps <- (4*52):(7*52)
# fit models for direct forecasting
for(horizon in 1:4){
ctrl_gravity_temp <- ctrl_gravity
ctrl_gravity_temp$subset <- (horizon + max_lag):max(ctrl_gravity_temp$subset)
ctrl_gravity_temp$ar$lag <- ctrl_gravity_temp$ne$lag <- horizon
ctrl_gravity_temp$min_lag <- horizon
ctrl_gravity_temp$max_lag <- horizon + max_lag - 1
ctrl_gravity_pois_temp <- ctrl_gravity_temp; ctrl_gravity_pois_temp$funct_lag <- poisson_lag
ctrl_gravity_lin_temp <- ctrl_gravity_temp; ctrl_gravity_lin_temp$funct_lag <- linear_lag
ctrl_gravity_unres_temp <- ctrl_gravity_temp; ctrl_gravity_unres_temp$funct_lag <- unrestricted_lag
for(ind in tps){
# steer subset via NAs:
rotaBE_temp <- rotaBE
if(ind < nrow(rotaBE)){
rotaBE_temp@observed[(ind + 1):nrow(rotaBE_temp), ] <- NA
}
# fit_rota_gravity_ar1_temp <- hhh4(rotaBE_temp, ctrl_gravity_temp)
# save(fit_rota_gravity_ar1_temp, file = paste0("model_fits/rota_gravity_ar1/rota_gravity_ar1_h", horizon,
#                                               "/fit_rota_gravity_ar1_h", horizon, "_",
#                                               ind, ".rda"))
#
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_gravity_geom_temp$par_lag)
# fit_rota_gravity_geom_temp <- profile_par_lag(rotaBE_temp, ctrl_gravity_temp,
#                                               start_par_lag = start_par_lag)
# save(fit_rota_gravity_geom_temp, file = paste0("model_fits/rota_gravity_geom/rota_gravity_geom_h", horizon,
#                                                "/fit_rota_gravity_geom_h", horizon, "_",
#                                                ind, ".rda"))
#
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_gravity_pois_temp$par_lag)
# fit_rota_gravity_pois_temp <- profile_par_lag(rotaBE_temp, ctrl_gravity_pois_temp,
#                                               start_par_lag = start_par_lag)
# save(fit_rota_gravity_pois_temp, file = paste0("model_fits/rota_gravity_pois/rota_gravity_pois_h", horizon,
#                                                "/fit_rota_gravity_pois_h", horizon, "_",
#                                                ind, ".rda"))
# start_par_lag <- ifelse(ind == tps[1], 0.5, fit_rota_gravity_lin_temp$par_lag)
# fit_rota_gravity_lin_temp <- profile_par_lag(rotaBE_temp, ctrl_gravity_lin_temp,
#                                              start_par_lag = start_par_lag)
fit_rota_gravity_lin_temp <- fit_par_lag(rotaBE_temp, ctrl_gravity_lin_temp,
range_par = vals_par_lag_lin, use_update = FALSE)$best_mod
save(fit_rota_gravity_lin_temp, file = paste0("model_fits/rota_gravity_lin/rota_gravity_lin_h", horizon,
"/fit_rota_gravity_lin_h", horizon, "_",
ind, ".rda"))
# start_par_lag <- if(ind == tps[1]){
#   rep(0.5, max_lag - 1)
# }else{
#   fit_rota_gravity_unres_temp$par_lag
# }
# fit_rota_gravity_unres_temp <- profile_par_lag(rotaBE_temp, ctrl_gravity_unres_temp,
#                                                start_par_lag = start_par_lag)
# save(fit_rota_gravity_unres_temp, file = paste0("model_fits/rota_gravity_unres/rota_gravity_unres_h", horizon,
#                                                 "/fit_rota_gravity_unres_h", horizon, "_",
#                                                 ind, ".rda"))
print(ind)
}
}
warnings()
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota/model_fits/rota_full_lin/rota_full_lin_h1")
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota/model_fits/rota_full_lin/rota_full_lin_h1")
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
res_par_lag[ind] <- fit_rota_gravity_lin_temp$par_lag
}
res_par_lag
plot(res_par_lag)
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota/model_fits/rota_full_lin/rota_full_lin_h1")
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
res_par_lag[ind] <- fit_rota_gravity_lin_temp$par_lag
}
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota/model_fits/rota_full_lin/rota_full_lin_h1")
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
res_par_lag[ind] <- fit_rota_full_lin_temp$par_lag
}
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota/model_fits/rota_full_lin/rota_full_lin_h1")
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
res_par_lag[ind] <- fit_rota_full_lin_temp$best_mod$par_lag
}
res_par_lag
plot(res_par_lag)
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota/model_fits/rota_gravity_lin/rota_gravity_lin_h1")
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota/model_fits/rota_gravity_lin/rota_gravity_lin_h1")
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
res_par_lag[ind] <- fit_rota_gravity_lin_temp$best_mod$par_lag
}
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_gravity_lin_h1_", ind, ".rda"))
res_par_lag[ind] <- fit_rota_gravity_lin_temp$best_mod$par_lag
}
res_par_lag[ind] <- fit_rota_gravity_lin_temp$par_lag
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_gravity_lin_h1_", ind, ".rda"))
res_par_lag[ind] <- fit_rota_gravity_lin_temp$par_lag
}
res_par_lag
plot(res_par_lag)
res_par_lag
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota/model_fits/rota_full_lin/rota_full_lin_h1")
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
res_par_lag[ind] <- fit_rota_full_lin_temp$best_mod$par_lag
}
res_par_lag
plot(res_par_lag)
which.min(res_par_lag)
load(paste0("fit_rota_full_lin_h1_", 329, ".rda"))
plot(fit_rota_full_lin_temp$AICs)
plot(fit_rota_full_lin_temp$AICs, type = "l")
fit_rota_full_lin_temp$best_mod$distr_lag
load(paste0("fit_rota_full_lin_h1_", 330, ".rda"))
plot(fit_rota_full_lin_temp$AICs, type = "l")
fit_rota_full_lin_temp$best_mod$distr_lag
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/rota/model_fits/rota_full_lin/rota_full_lin_h1")
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
save(fit_rota_full_lin_temp$best_mod, file = paste0("fit_rota_full_lin_h1_", ind, ".rda"))
}
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
fit_rota_full_lin_temp$best_mod
save(fit_rota_full_lin_temp$best_mod, file = paste0("fit_rota_full_lin_h1_", ind, ".rda"))
fit_rota_full_lin_temp$best_mod
paste0("fit_rota_full_lin_h1_", ind, ".rda")
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
save(fit_rota_full_lin_temp$best_mod, file = paste0("fit_rota_full_lin_h1_", ind, ".rda"))
fit_rota_full_lin_temp$best_mod
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
save(fit_rota_full_lin_temp$best_mod, file = paste0("fit_rota_full_lin_h1_", ind, ".rda"))
fit_rota_full_lin_temp
save(fit_rota_full_lin_temp$best_mod,
file = paste0("fit_rota_full_lin_h1_", ind, ".rda"))
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
save(fit_rota_full_lin_temp$best_mod,
file = paste0("fit_rota_full_lin_h1_", ind, ".rda"))
save(fit_rota_full_lin_temp$best_mod, file = "test.rda")
fit_rota_full_lin_temp$best_mod
fit_rota_full_lin_temp <- fit_rota_full_lin_temp$best_mod
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
fit_rota_full_lin_temp <- fit_rota_full_lin_temp$best_mod
save(fit_rota_full_lin_temp,
file = paste0("fit_rota_full_lin_h1_", ind, ".rda"))
}
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_rota_full_lin_h1_", ind, ".rda"))
res_par_lag[ind] <- fit_rota_full_lin_temp$par_lag
}
res_par_lag
plot(res_par_lag)
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/noro/model_fits/noro_full_lin/noro_full_lin_h1")
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/noro/model_fits/noro_full_lin/noro_full_lin_h1")
load(paste0("fit_noro_full_lin_h1_", ind, ".rda"))
ind <- 208
load(paste0("fit_noro_full_lin_h1_", ind, ".rda"))
setwd("/home/johannes/Documents/hhh4predict/Theory/Article_Theory/data_analysis_forecasting/noro/model_fits/noro_full_lin/noro_full_lin_h1")
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_noro_full_lin_h1_", ind, ".rda"))
fit_noro_full_lin_temp <- fit_noro_full_lin_temp$best_mod
save(fit_noro_full_lin_temp, file = paste0("fit_noro_full_lin_h1_", ind, ".rda"))
}
fit_noro_full_lin_temp
res_par_lag <- numeric(364)
for(ind in 208:364){
load(paste0("fit_noro_full_lin_h1_", ind, ".rda"))
res_par_lag[ind] <- fit_noro_full_lin_temp$par_lag
}
res_par_lag
fit_noro_full_linplot(res_par_lag)
res_par_lag
plot(res_par_lag)
linear_lag(-0.28, 1, 5)
linear_lag(-0.24, 1, 5)
